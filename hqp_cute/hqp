#!/bin/csh
# hqp: adapted from gen for application of HQP
# rf, 11/15/1995
# last modified: 4/21/1997
#
# Use: hqp [-n] [-h] [-s] [-k] [-o i] [-l secs]
#
# where: options -n : use the load module f if it exists
#                     (Default: create a new load module)
#                -h : print this help and stop execution
#                -s : run the single precision version
#                     (Default: run the double precision version)
#                -k : keep the load module after use
#                     (Default: delete the load module)
#                -o : 0 for silent mode, 1 for brief description of
#                     the stages executed
#                     (Default: -o 0)
#                -l : limit the cputime used to secs seconds
#                     (Default: -l 99999999)

#
#  A. Conn, Nick Gould and Ph. Toint, October 28th, 1991, for CGT Productions.
#  modified by I. Bongartz, May 1994.
#
# ** Correction report.
# ** Correction 1. 31/05/94: added check for installation of requested precision
# ** Correction 2. 25/07/94: added check for existence of ${GEN} object file
# ** Correction 3. 04/10/94: cleaned up setting of UTOOLS and CTOOLS
# ** Correction 4. 04/10/94: added ccifg and cscifg to CTOOLS
# ** End of Correction report.

#
#  define the package to which you wish to build an interface
#

set GEN = hqp

#
#  basic system commands
#

set RM   = "rm -f"
set MAKE = make
set CAT  = cat
set MV   = mv

#
#  compiler and flags (machine dependent)
#

set FORTRAN=f77
set FFLAGS=""

set HQP_LDPATH="${HOME}/lib"
set TCL_LDPATH="/usr/local/lib"
set CCLIBS=""

set HQPLIBS="-L${HQP_LDPATH} -lhqp -L${TCL_LDPATH} -ltcl ${CCLIBS} -lm"

#
#  If there are compiled, library versions of the level-1 blas
#  (basic linear algebra subprograms), set BLAS to a list of
#  names of the object library suffix -lx, where the object library
#  libx.a contains relevant blas. For instance if the blas are
#  shared between object libraries libblas1.a and libblas2.a,
#  BLAS should be set to "-lblas1 -lblas2", noting that those in
#  libblas1.a will take precedence over those in libblas2.a.
#  If compiled blas are unavailable, BLAS should be set to ""
#

set BLAS=""
#set BLAS="-lblas"

#
#  directory for the main executable file
#

set EXEC=$cwd

#
#  directory for temporary files
#

set TMP=/tmp

#
#  name of object version of GEN (single and double precision)
#

set SUBS=
set SUBD=


#
#  variables for each option
#

#
# PRECISION = 0 (single precision), = 1 (double precision)
#

set PRECISION=1

#
# NEW = 0 (run existing f module), = 1 (build a new module)
#

set NEW = 0

#
# KEEP = 0 (discard f load module after use), = 1 (keep it)
#

set KEEP = 0

#
# OUTPUT = 0 (summary output), = 1 (detailed output from decoder)
#

set OUTPUT=0

#
# LIMIT = 0 (no cputime limit)
#

set LIMIT = 99999999

#
#  interpret arguments
#

@ last=$#argv
@ i=1

while ($i <= $last)
  set opt=$argv[$i]
  if("$opt" == '-n')then
    set NEW=1
  else if("$opt" == '-s')then
    set PRECISION=0
  else if("$opt" == '-h')then
    echo ' Use: gen [-n] [-h] [-s] [-k] [-o i] [-l secs]'
    echo ' '
    echo ' where: options -n : use the load module f if it exists'
    echo '                     (Default: create a new load module)'
    echo '                -h : print this help and stop execution'
    echo '                -s : run the single precision version'
    echo '                     (Default: run the double precision version)'
    echo '                -k : keep the load module after use '
    echo '                     (Default: delete the load module)'
    echo '                -o : 0 for silent mode, 1 for brief description of'
    echo '                     the stages executed'
    echo '                     (Default: -o 0)'
    echo '                -l : limits the cputime to secs seconds'
    echo '                     (Default: -l 99999999)'
    exit 0
  else if("$opt" == '-k')then
    set KEEP=1
  else if("$opt" == '-o')then
    @ i++
    set OUTPUT=$argv[$i]
  else if("$opt" == '-l')then
    @ i++
    set LIMIT=$argv[$i]
  else
    echo 'Use: gen [-n] [-h] [-s] [-k] [-o i] [-l secs]'
    exit 1
  endif
  @ i++
end

#
#  run GEN without rebuilding it
#

if (! $NEW) then
  if (! -e $EXEC/${GEN}min || ! -x $EXEC/${GEN}min) then
    echo ' '
    echo "load module ${GEN}min not found/executable. Rerun with -n option"
    echo ' '
    exit 3
  endif
  if ($OUTPUT) then
    echo ' '
    echo "running ${GEN}min on current test problem ... "
    echo ' '
  endif
  limit cputime $LIMIT
  $EXEC/${GEN}min

#  tidy up the current directory, deleting all junk.

  if (! $KEEP) $RM $EXEC/${GEN}min
  exit 0
endif

#
#  build GEN and tools
#
#  directory for object files
#

if(! $PRECISION)then
   set OBJ=$CUTEDIR/tools/objects/single
   set SUBR=$SUBS
else
   set OBJ=$CUTEDIR/tools/objects/double
   set SUBR=$SUBD
endif

# ** Correction 2. 25/07/94: added check for existence of ${GEN} object file

#if (! -e $SUBR) then
#  echo ' '
#  echo "${GEN} object file not in "$SUBR
#  echo 'Terminating execution.'
#  exit 5
#endif

# ** End of Correction 2.

# ** Correction 1. 31/05/94: added check for installation of requested precision

if (! -e $OBJ/initw.o) then
  echo ' '
  echo 'Object files for tools not in '$OBJ
  echo 'Terminating execution.'
  exit 4
endif

# ** End of Correction 1.

#  if there are no library blas, include the default ones.

if ("$BLAS" == '') then
   set BLAS=$OBJ/linpac.o
endif

#
#  list of Fortran tools needed for the interface
#

set UTOOLS = usetup,unames,ufn,ugr,uofg,udh,ugrdh,ush,ugrsh,uprod,ubandh
set CTOOLS = csetup,cnames,cfn,cgr,cofg,csgr,ccfg,cscfg,cdh,cgrdh,csh,csgrsh,cprod,ccifg,cscifg,csgreh,asmbe

# ensure that the current test problem has been compiled.

if ($OUTPUT) then
  echo 'compiling the current test problem, if that is necessary ... '
  echo ' '
endif

if(-e EXTERN.f && ! -z EXTERN.f) \
$MAKE -f $CUTEDIR/compil p >& $TMP/${GEN}f77
if(! -e EXTERN.f || -z EXTERN.f) \
$MAKE -f $CUTEDIR/compil pnoextern >& $TMP/${GEN}f77

if ($status != 0) then
  $CAT $TMP/${GEN}f77
  $RM $TMP/${GEN}f77
  exit 1
endif

# link all the GEN and tools files together.

if ($OUTPUT) then
  $CAT $TMP/${GEN}f77
  echo ' '
  echo 'linking all the object files together ... '
  echo ' '
endif
$RM $TMP/${GEN}f77

if (-e EXTERN.o && -z EXTERN.o) $RM EXTERN.o
if (-e EXTERN.f && -z EXTERN.f) $RM EXTERN.f

if (-e EXTERN.f) then
  $FORTRAN $FFLAGS -o ${GEN}min\
    ELFUNS.o GROUPS.o RANGES.o SETTYP.o EXTERN.o\
    $OBJ/${GEN}ma.o $SUBR $OBJ/{$UTOOLS}.o $OBJ/{$CTOOLS}.o\
    $OBJ/others.o $OBJ/elgrd.o $OBJ/asmbl.o\
    $OBJ/initw.o $OBJ/hsprd.o $OBJ/local.o $BLAS $HQPLIBS
  if( $cwd != $EXEC ) $MV ${GEN}min $EXEC/${GEN}min
endif

if (! -e EXTERN.f) then
  $FORTRAN $FFLAGS -o ${GEN}min\
    ELFUNS.o GROUPS.o RANGES.o SETTYP.o\
    $OBJ/${GEN}ma.o $SUBR $OBJ/{$UTOOLS}.o $OBJ/{$CTOOLS}.o\
    $OBJ/others.o $OBJ/elgrd.o $OBJ/asmbl.o\
    $OBJ/initw.o $OBJ/hsprd.o $OBJ/local.o $BLAS $HQPLIBS
  if( $cwd != $EXEC ) $MV ${GEN}min $EXEC/${GEN}min
endif

#  run GEN on the current test problem.

if ($OUTPUT) then
  echo ' '
  echo "running ${GEN}min on current test problem ... "
  echo ' '
endif

limit cputime $LIMIT
time $EXEC/${GEN}min $CUTEDIR/hqp/hqp_cute.tcl

#  tidy up the current directory, deleting all junk.

if (! $KEEP) $RM $EXEC/${GEN}min

